.TH "yajl_callbacks" 3 "18 Dec 2009" "Version 1.0.8" "YAJL" \" -*- nroff -*-
.ad l
.nh
.SH NAME
yajl_callbacks \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <yajl_parse.h>\fP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "int(* \fByajl_null\fP )(void *ctx)"
.br
.ti -1c
.RI "int(* \fByajl_boolean\fP )(void *ctx, int boolVal)"
.br
.ti -1c
.RI "int(* \fByajl_integer\fP )(void *ctx, long integerVal)"
.br
.ti -1c
.RI "int(* \fByajl_double\fP )(void *ctx, double doubleVal)"
.br
.ti -1c
.RI "int(* \fByajl_number\fP )(void *ctx, const char *numberVal, unsigned int numberLen)"
.br
.ti -1c
.RI "int(* \fByajl_string\fP )(void *ctx, const unsigned char *stringVal, unsigned int stringLen)"
.br
.ti -1c
.RI "int(* \fByajl_start_map\fP )(void *ctx)"
.br
.ti -1c
.RI "int(* \fByajl_map_key\fP )(void *ctx, const unsigned char *key, unsigned int stringLen)"
.br
.ti -1c
.RI "int(* \fByajl_end_map\fP )(void *ctx)"
.br
.ti -1c
.RI "int(* \fByajl_start_array\fP )(void *ctx)"
.br
.ti -1c
.RI "int(* \fByajl_end_array\fP )(void *ctx)"
.br
.in -1c
.SH "Detailed Description"
.PP 
yajl is an event driven parser. this means as json elements are parsed, you are called back to do something with the data. The functions in this table indicate the various events for which you will be called back. Each callback accepts a 'context' pointer, this is a void * that is passed into the yajl_parse function which the client code may use to pass around context.
.PP
All callbacks return an integer. If non-zero, the parse will continue. If zero, the parse will be canceled and yajl_status_client_canceled will be returned from the parse.
.PP
Note about handling of numbers: yajl will only convert numbers that can be represented in a double or a long int. All other numbers will be passed to the client in string form using the yajl_number callback. Furthermore, if yajl_number is not NULL, it will always be used to return numbers, that is yajl_integer and yajl_double will be ignored. If yajl_number is NULL but one of yajl_integer or yajl_double are defined, parsing of a number larger than is representable in a double or long int will result in a parse error. 
.SH "Field Documentation"
.PP 
.SS "int(*  \fByajl_callbacks::yajl_boolean\fP)(void *ctx, int boolVal)"
.SS "int(*  \fByajl_callbacks::yajl_double\fP)(void *ctx, double doubleVal)"
.SS "int(*  \fByajl_callbacks::yajl_end_array\fP)(void *ctx)"
.SS "int(*  \fByajl_callbacks::yajl_end_map\fP)(void *ctx)"
.SS "int(*  \fByajl_callbacks::yajl_integer\fP)(void *ctx, long integerVal)"
.SS "int(*  \fByajl_callbacks::yajl_map_key\fP)(void *ctx, const unsigned char *key, unsigned int stringLen)"
.SS "int(*  \fByajl_callbacks::yajl_null\fP)(void *ctx)"
.SS "int(*  \fByajl_callbacks::yajl_number\fP)(void *ctx, const char *numberVal, unsigned int numberLen)"A callback which passes the string representation of the number back to the client. Will be used for all numbers when present 
.SS "int(*  \fByajl_callbacks::yajl_start_array\fP)(void *ctx)"
.SS "int(*  \fByajl_callbacks::yajl_start_map\fP)(void *ctx)"
.SS "int(*  \fByajl_callbacks::yajl_string\fP)(void *ctx, const unsigned char *stringVal, unsigned int stringLen)"strings are returned as pointers into the JSON text when, possible, as a result, they are _not_ null padded 

.SH "Author"
.PP 
Generated automatically by Doxygen for YAJL from the source code.
